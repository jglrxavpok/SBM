// Generated from spirv-opcodesonly.json
package sbm.old;

import java.lang.reflect.Field;
import java.util.HashMap;

@Deprecated
public interface Opcodes_old {

    int OpNop = 0;
    int OpUndef = 1;
    int OpSizeOf = 321;
    int OpSourceContinued = 2;
    int OpSource = 3;
    int OpSourceExtension = 4;
    int OpName = 5;
    int OpMemberName = 6;
    int OpString = 7;
    int OpLine = 8;
    int OpNoLine = 317;
    int OpModuleProcessed = 330;
    int OpDecorate = 71;
    int OpMemberDecorate = 72;
    int OpDecorationGroup = 73;
    int OpGroupDecorate = 74;
    int OpGroupMemberDecorate = 75;
    int OpExtension = 10;
    int OpExtInstImport = 11;
    int OpExtInst = 12;
    int OpMemoryModel = 14;
    int OpEntryPoint = 15;
    int OpExecutionMode = 16;
    int OpCapability = 17;
    int OpTypeVoid = 19;
    int OpTypeBool = 20;
    int OpTypeInt = 21;
    int OpTypeFloat = 22;
    int OpTypeVector = 23;
    int OpTypeMatrix = 24;
    int OpTypeImage = 25;
    int OpTypeSampler = 26;
    int OpTypeSampledImage = 27;
    int OpTypeArray = 28;
    int OpTypeRuntimeArray = 29;
    int OpTypeStruct = 30;
    int OpTypeOpaque = 31;
    int OpTypePointer = 32;
    int OpTypeFunction = 33;
    int OpTypeEvent = 34;
    int OpTypeDeviceEvent = 35;
    int OpTypeReserveId = 36;
    int OpTypeQueue = 37;
    int OpTypePipe = 38;
    int OpTypeForwardPointer = 39;
    int OpTypePipeStorage = 322;
    int OpTypeNamedBarrier = 327;
    int OpConstantTrue = 41;
    int OpConstantFalse = 42;
    int OpConstant = 43;
    int OpConstantComposite = 44;
    int OpConstantSampler = 45;
    int OpConstantNull = 46;
    int OpSpecConstantTrue = 48;
    int OpSpecConstantFalse = 49;
    int OpSpecConstant = 50;
    int OpSpecConstantComposite = 51;
    int OpSpecConstantOp = 52;
    int OpVariable = 59;
    int OpImageTexelPointer = 60;
    int OpLoad = 61;
    int OpStore = 62;
    int OpCopyMemory = 63;
    int OpCopyMemorySized = 64;
    int OpAccessChain = 65;
    int OpInBoundsAccessChain = 66;
    int OpPtrAccessChain = 67;
    int OpArrayLength = 68;
    int OpGenericPtrMemSemantics = 69;
    int OpInBoundsPtrAccessChain = 70;
    int OpFunction = 54;
    int OpFunctionParameter = 55;
    int OpFunctionEnd = 56;
    int OpFunctionCall = 57;
    int OpSampledImage = 86;
    int OpImageSampleImplicitLod = 87;
    int OpImageSampleExplicitLod = 88;
    int OpImageSampleDrefImplicitLod = 89;
    int OpImageSampleDrefExplicitLod = 90;
    int OpImageSampleProjImplicitLod = 91;
    int OpImageSampleProjExplicitLod = 92;
    int OpImageSampleProjDrefImplicitLod = 93;
    int OpImageSampleProjDrefExplicitLod = 94;
    int OpImageFetch = 95;
    int OpImageGather = 96;
    int OpImageDrefGather = 97;
    int OpImageRead = 98;
    int OpImageWrite = 99;
    int OpImage = 100;
    int OpImageQueryFormat = 101;
    int OpImageQueryOrder = 102;
    int OpImageQuerySizeLod = 103;
    int OpImageQuerySize = 104;
    int OpImageQueryLod = 105;
    int OpImageQueryLevels = 106;
    int OpImageQuerySamples = 107;
    int OpImageSparseSampleImplicitLod = 305;
    int OpImageSparseSampleExplicitLod = 306;
    int OpImageSparseSampleDrefImplicitLod = 307;
    int OpImageSparseSampleDrefExplicitLod = 308;
    int OpImageSparseSampleProjImplicitLod = 309;
    int OpImageSparseSampleProjExplicitLod = 310;
    int OpImageSparseSampleProjDrefImplicitLod = 311;
    int OpImageSparseSampleProjDrefExplicitLod = 312;
    int OpImageSparseFetch = 313;
    int OpImageSparseGather = 314;
    int OpImageSparseDrefGather = 315;
    int OpImageSparseTexelsResident = 316;
    int OpImageSparseRead = 320;
    int OpConvertFToU = 109;
    int OpConvertFToS = 110;
    int OpConvertSToF = 111;
    int OpConvertUToF = 112;
    int OpUConvert = 113;
    int OpSConvert = 114;
    int OpFConvert = 115;
    int OpQuantizeToF16 = 116;
    int OpConvertPtrToU = 117;
    int OpSatConvertSToU = 118;
    int OpSatConvertUToS = 119;
    int OpConvertUToPtr = 120;
    int OpPtrCastToGeneric = 121;
    int OpGenericCastToPtr = 122;
    int OpGenericCastToPtrExplicit = 123;
    int OpBitcast = 124;
    int OpVectorExtractDynamic = 77;
    int OpVectorInsertDynamic = 78;
    int OpVectorShuffle = 79;
    int OpCompositeConstruct = 80;
    int OpCompositeExtract = 81;
    int OpCompositeInsert = 82;
    int OpCopyObject = 83;
    int OpTranspose = 84;
    int OpSNegate = 126;
    int OpFNegate = 127;
    int OpIAdd = 128;
    int OpFAdd = 129;
    int OpISub = 130;
    int OpFSub = 131;
    int OpIMul = 132;
    int OpFMul = 133;
    int OpUDiv = 134;
    int OpSDiv = 135;
    int OpFDiv = 136;
    int OpUMod = 137;
    int OpSRem = 138;
    int OpSMod = 139;
    int OpFRem = 140;
    int OpFMod = 141;
    int OpVectorTimesScalar = 142;
    int OpMatrixTimesScalar = 143;
    int OpVectorTimesMatrix = 144;
    int OpMatrixTimesVector = 145;
    int OpMatrixTimesMatrix = 146;
    int OpOuterProduct = 147;
    int OpDot = 148;
    int OpIAddCarry = 149;
    int OpISubBorrow = 150;
    int OpUMulExtended = 151;
    int OpSMulExtended = 152;
    int OpShiftRightLogical = 194;
    int OpShiftRightArithmetic = 195;
    int OpShiftLeftLogical = 196;
    int OpBitwiseOr = 197;
    int OpBitwiseXor = 198;
    int OpBitwiseAnd = 199;
    int OpNot = 200;
    int OpBitFieldInsert = 201;
    int OpBitFieldSExtract = 202;
    int OpBitFieldUExtract = 203;
    int OpBitReverse = 204;
    int OpBitCount = 205;
    int OpAny = 154;
    int OpAll = 155;
    int OpIsNan = 156;
    int OpIsInf = 157;
    int OpIsFinite = 158;
    int OpIsNormal = 159;
    int OpSignBitSet = 160;
    int OpLessOrGreater = 161;
    int OpOrdered = 162;
    int OpUnordered = 163;
    int OpLogicalEqual = 164;
    int OpLogicalNotEqual = 165;
    int OpLogicalOr = 166;
    int OpLogicalAnd = 167;
    int OpLogicalNot = 168;
    int OpSelect = 169;
    int OpIEqual = 170;
    int OpINotEqual = 171;
    int OpUGreaterThan = 172;
    int OpSGreaterThan = 173;
    int OpUGreaterThanEqual = 174;
    int OpSGreaterThanEqual = 175;
    int OpULessThan = 176;
    int OpSLessThan = 177;
    int OpULessThanEqual = 178;
    int OpSLessThanEqual = 179;
    int OpFOrdEqual = 180;
    int OpFUnordEqual = 181;
    int OpFOrdNotEqual = 182;
    int OpFUnordNotEqual = 183;
    int OpFOrdLessThan = 184;
    int OpFUnordLessThan = 185;
    int OpFOrdGreaterThan = 186;
    int OpFUnordGreaterThan = 187;
    int OpFOrdLessThanEqual = 188;
    int OpFUnordLessThanEqual = 189;
    int OpFOrdGreaterThanEqual = 190;
    int OpFUnordGreaterThanEqual = 191;
    int OpDPdx = 207;
    int OpDPdy = 208;
    int OpFwidth = 209;
    int OpDPdxFine = 210;
    int OpDPdyFine = 211;
    int OpFwidthFine = 212;
    int OpDPdxCoarse = 213;
    int OpDPdyCoarse = 214;
    int OpFwidthCoarse = 215;
    int OpPhi = 245;
    int OpLoopMerge = 246;
    int OpSelectionMerge = 247;
    int OpLabel = 248;
    int OpBranch = 249;
    int OpBranchConditional = 250;
    int OpSwitch = 251;
    int OpKill = 252;
    int OpReturn = 253;
    int OpReturnValue = 254;
    int OpUnreachable = 255;
    int OpLifetimeStart = 256;
    int OpLifetimeStop = 257;
    int OpAtomicLoad = 227;
    int OpAtomicStore = 228;
    int OpAtomicExchange = 229;
    int OpAtomicCompareExchange = 230;
    int OpAtomicCompareExchangeWeak = 231;
    int OpAtomicIIncrement = 232;
    int OpAtomicIDecrement = 233;
    int OpAtomicIAdd = 234;
    int OpAtomicISub = 235;
    int OpAtomicSMin = 236;
    int OpAtomicUMin = 237;
    int OpAtomicSMax = 238;
    int OpAtomicUMax = 239;
    int OpAtomicAnd = 240;
    int OpAtomicOr = 241;
    int OpAtomicXor = 242;
    int OpAtomicFlagTestAndSet = 318;
    int OpAtomicFlagClear = 319;
    int OpEmitVertex = 218;
    int OpEndPrimitive = 219;
    int OpEmitStreamVertex = 220;
    int OpEndStreamPrimitive = 221;
    int OpControlBarrier = 224;
    int OpMemoryBarrier = 225;
    int OpNamedBarrierInitialize = 328;
    int OpMemoryNamedBarrier = 329;
    int OpGroupAsyncCopy = 259;
    int OpGroupWaitEvents = 260;
    int OpGroupAll = 261;
    int OpGroupAny = 262;
    int OpGroupBroadcast = 263;
    int OpGroupIAdd = 264;
    int OpGroupFAdd = 265;
    int OpGroupFMin = 266;
    int OpGroupUMin = 267;
    int OpGroupSMin = 268;
    int OpGroupFMax = 269;
    int OpGroupUMax = 270;
    int OpGroupSMax = 271;
    int OpSubgroupBallotKHR = 4421;
    int OpSubgroupFirstInvocationKHR = 4422;
    int OpSubgroupReadInvocationKHR = 4432;
    int OpEnqueueMarker = 291;
    int OpEnqueueKernel = 292;
    int OpGetKernelNDrangeSubGroupCount = 293;
    int OpGetKernelNDrangeMaxSubGroupSize = 294;
    int OpGetKernelWorkGroupSize = 295;
    int OpGetKernelPreferredWorkGroupSizeMultiple = 296;
    int OpRetainEvent = 297;
    int OpReleaseEvent = 298;
    int OpCreateUserEvent = 299;
    int OpIsValidEvent = 300;
    int OpSetUserEventStatus = 301;
    int OpCaptureEventProfilingInfo = 302;
    int OpGetDefaultQueue = 303;
    int OpBuildNDRange = 304;
    int OpGetKernelLocalSizeForSubgroupCount = 325;
    int OpGetKernelMaxNumSubgroups = 326;
    int OpReadPipe = 274;
    int OpWritePipe = 275;
    int OpReservedReadPipe = 276;
    int OpReservedWritePipe = 277;
    int OpReserveReadPipePackets = 278;
    int OpReserveWritePipePackets = 279;
    int OpCommitReadPipe = 280;
    int OpCommitWritePipe = 281;
    int OpIsValidReserveId = 282;
    int OpGetNumPipePackets = 283;
    int OpGetMaxPipePackets = 284;
    int OpGroupReserveReadPipePackets = 285;
    int OpGroupReserveWritePipePackets = 286;
    int OpGroupCommitReadPipe = 287;
    int OpGroupCommitWritePipe = 288;
    int OpConstantPipeStorage = 323;
    int OpCreatePipeFromPipeStorage = 324;
    HashMap<Integer, String> names = new HashMap<>();


    static String getName(int opcode) {
        if(names.isEmpty()) {
            Field[] fields = Opcodes_old.class.getDeclaredFields();
            for(Field field : fields) {
                if(field.getType() == Integer.TYPE) {
                    try {
                        int value = field.getInt(null);
                        if(!names.containsKey(value))
                            names.put(value, field.getName());
                    } catch (IllegalAccessException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        if(names.containsKey(opcode)) {
            return names.get(opcode);
        }
        return "NULL";
    }
}